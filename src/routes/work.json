[
	{
		"name": "Equinix Metal",
		"title": "Senior Security Engineer",
		"start": "2023",
		"end": "2024",
		"iconPath": "work/eqix.svg",
		"href": "https://deploy.equinix.com/",
		"summary": "Secured infrastructure for 220 applications across 80 global Kubernetes clusters (800+ nodes) and 5,000+ deployments. Focused on scaling security, driving operational efficiency, and enabling teams to maintain secure practices in a fast-paced, cloud-native environment.",
		"overview": {
			"summary": "As a security-focused engineer at Equinix Metal, I was responsible for securing the infrastructure supporting 220 applications across a global fleet of 80 Kubernetes clusters (800+ nodes), with over 5000 deployments.",
			"contributions": {
				"✅ Software Development": [
					{
						"▼ Open Source SSH monitoring Software (Go)": [
							"▼ Used two goroutines to monitor OpenSSH logins and Auditd logs, sending specific actions to a correlation Go channel. A third goroutine then processed the actions, correlating authenticated user activity synchronously and forwarding the results to Splunk.",
							"▼ Re-architected the software to support any Linux distro by abstracting how it monitors systemd and audit logs, creating a mental model for ingesters and processors, while eliminating approximately 1,000 lines of complex code.",
							"▼ Further abstracted and simplified ingesters through the use of named pipes, providing a simple interface for ingesters to consume new events. Used the <strong>bufio.ReadString</strong> method, which blocks until a delimiter is matched or an error is returned, often <strong>io.EOF</strong> when the named pipe closes.",
							"▼ Deployed the software across 80 Kubernetes clusters using ArgoCD and Helm. ArgoCD was used to manage the continuous delivery and synchronization of the application across the clusters, while Helm facilitated the deployment and management of the application’s configurations in a consistent and repeatable manner.",
							"Find the source code here: (Software: <a class='text-sky-500' href='https://github.com/metal-toolbox/audito-maldito/tree/main'>Audito</a>) (Helm: <a class='text-sky-500' href='https://github.com/equinixmetal-helm/audito-maldito'>Chart</a>)"
						]
					},
					{
						"▼ HashiCorp Vault Kubernetes Auth Method Configuration (Go)": [
							"▼ In a fast-paced, constantly changing environment, I developed a custom Go CLI tool to manage secret configurations for Kubernetes applications. This tool integrated with several in-house systems to ensure proper secret management configuration for 200 Kubernetes applications, automatically updating Vault configurations whenever the environment changed, such as when a new application was deployed to a cluster.",
							"▼ This design provided a self service model for engineers, only requiring engineers to add their app secrets to Vault and add a few k8s annotations to their K8s Pod manifest e.g. <strong> vault.hashicorp.com/agent-inject-secret-database-config.txt</strong>",
							"▼ This app retrieves the current state of the infrastructure through an exposed API, fetches user and group data from an internal IAM API, and accesses the current Vault configuration from the Vault REST API. It then identifies the necessary changes and applies them to Vault via the REST API.",
							"▼ The code included a custom Vault <strong>http.Client</strong> with methods to access Vault's Auth, Identity, Mounts, and Policy endpoints, as well as services with a clean interface for interacting with internal APIs.",
							"▼ Unit tests for the business logic were written using Go's <strong>testing</strong> package.",
							"▼ Integration tests were run locally by spinning up a Vault Docker image, configuring Vault with the base configuration, running the CLI tool, and finally using the Vault client to validate that the correct configurations were applied."
						]
					},
					{
						"▼ Falco Rule Event Generator Test Sandbox (Go)": [
							"▼ Falco is a cloud-native security tool that detects abnormal behavior, security threats, and compliance violations in real time across hosts, containers, Kubernetes, and cloud environments by leveraging custom rules on Linux kernel events and other data sources.",
							"▼ Created a custom sandbox to validate that the Falco rules were written correctly before updating them in production. The sandbox consisted of a Minikube VM with Falco installed, configured with custom rules, and an event generator Go app that triggered events.",
							"▼ The event generator app followed the design outlined in the <a href='https://github.com/falcosecurity/event-generator' class='text-sky-500'> falcosecurity/event-generator</a> repository. Each custom event test was written in a separate file and registered at startup. A test loop then ran each event, validating whether it was properly generated or ignored by connecting to the Falco gRPC socket."
						]
					}
				],
				"✅ Security": [
					{
						"▼ Runtime Security": [
							"▼ Managed Sysdig and deployed it using the Sysdig Operator via Helm. Additionally, I leveraged ArgoCD to automate continuous delivery and ensure seamless synchronization of the application across multiple clusters.",
							"▼ Monitored runtime events, investigating any that appeared abnormal, such as a user accessing an etcd container as root, to identify potential security threats or policy violations.",
							"▼ Fine-tuned the runtime rules within the Sysdig SaaS platform, carefully balancing custom rulesets with the pre-configured managed rulesets to optimize security and minimize false positives."
						]
					},
					{
						"▼ Secrets Management": [
							"▼ Deployed Enterprise HashiCorp Vault to Kubernetes, with one primary and one failover cluster. Each Vault deployment was configured with high availability (HA), consisting of 5 Vault servers: one active write server and 4 standby read servers, replicating data using the Raft consensus algorithm.",
							"▼ Leveraged ArgoCD to automate continuous delivery and ensure seamless synchronization across environments.",
							"▼ Configured Okta integration in Vault for user access management.",
							"▼ Set up the Kubernetes Auth Method to enable secure authentication for Kubernetes clusters.",
							"▼ Configured policies for users, groups, and applications to enforce access controls.",
							"▼ Demoed the Kubernetes Auth Method to engineering teams, provided example app configurations, promoting its adoption and ensuring a smoother integration process."
						]
					},
					{
						"▼ Threat Modeling": [
							"▼ Continuously performed threat model analysis as my understanding of the infrastructure and environment grew, which revealed additional potential threat vectors.",
							"▼ Collaborated with the SRE team to schedule periodic CIS benchmark tests for Kubernetes environments using kube-bench.",
							"▼ Identified gaps in Pod Security Standards, presented the associated risks to leadership, and proposed remediation strategies, which led to greater visibility of the potential threats. One such risk for misconfigured Pod Security Standards is host mounting to the Kubernetes nodes. An engineer that can deploy and exec into a pod could host mount to any Kubernetes node and chroot to the mount as root.",
							"▼ Identified improper usage and storage of the CA private key, which is used to sign certificates for root access to all Kubernetes nodes.",
							"▼ Collaborated with the Red Team to schedule and coordinate periodic penetration tests on the infrastructure, ensuring regular security assessments to identify vulnerabilities and strengthen defenses."
						]
					}
				],
				"✅ SRE": [
					"▼ Assisted in troubleshooting and debugging Kubernetes issues by analyzing logs, investigating node and pod configurations, and identifying performance bottlenecks or misconfigurations to ensure the smooth operation of the Kubernetes clusters.",
					"▼ Collaborated with the Database Administrator (DBA) team to implement LUKS (Linux Unified Key Setup) disk encryption across all database nodes, ensuring data protection at rest and enhancing the overall security posture of the database infrastructure.",
					"▼ Attempted to enable SELinux on Flatcar Container Linux by resolving label mismatches and updating to the latest open-source SELinux reference policy to enhance security and compliance across the containerized environment. However, it appears that Flatcar Container Linux does not fully support SELinux with Kubernetes, despite what is suggested in the documentation.",
					"▼ Collaborated with the SRE team to enable node-to-node encryption using WireGuard, addressing the issue of Ceph replication occurring in clear text.",
					"▼ Configured the necessary Ignition files to enable and set up Auditd for system auditing."
				]
			},
			"skills": "Kubernetes · Helm · Ansible · HashiCorp Vault · Go · Python · Pandas · NumPy · SELinux · Sysdig · Falco Security · Trivy · Docker · ArgoCD"
		}
	},
	{
		"name": "Equinix",
		"title": "Senior Security Engineer",
		"start": "2020",
		"end": "2023",
		"iconPath": "work/eqix.svg",
		"href": "https://www.equinix.com/",
		"summary": "In the Infosec organization, I focused on data science initiatives and leveraged automation to strengthen security measures. I contributed to enhancing Equinix's security posture while improving operational efficiency across global infrastructure through data-driven insights and best practices.",
		"overview": {
			"summary": "In the Infosec organization, I focused on data science initiatives and leveraged automation to strengthen security measures. I contributed to enhancing Equinix's security posture while improving operational efficiency across global infrastructure through data-driven insights and best practices.",
			"contributions": {
				"✅ Software Development": [
					{
						"▼ Security Architecture Review (Go, Angular, PostgreSQL)": [
							"▼ Designed and developed a full-stack application to automate Security Architecture Reviews, significantly reducing the bottleneck of manual reviews and shortening review times from 3 months to just 30 minutes in some cases.",
							"▼ Developed the web app using Angular, Typescript, Bootstrap 4, and SCSS, with a responsive design based on the <a href='https://github.com/akveo/ngx-admin' class='text-sky-500'>ngx-admin</a> template. Unit tests were written using Jasmine and Karma.",
							"▼ Integrated PingID using OIDC for Single Sign-On (SSO). The web app included an authentication module that dynamically displayed user options based on roles (e.g., admin, reviewer). The app server validated the user's OIDC token and provided a JWT token for future authentication and authorization (Authn/z) during REST API calls.",
							"▼ The backend server was written in Go, leveraging the <a href='https://github.com/ardanlabs/service/tree/master' class='text-sky-500'>Service</a> framework. To ensure clean separation of program boundaries, the code was structured into API, business, and storage packages. Since this was an internal app with a low user volume, the focus was on code correctness, integrity, and maintainability.",
							"▼ Data was stored in a PostgreSQL database with a simple schema to track relationships between users and reviews.",
							"▼ Hosted the app in Kubernetes, deployed with ArgoCD and Helm charts."
						]
					}
				],
				"✅ Data Science": [
					{
						"▼ ML Engineering": [
							"▼ Coordinated the creation of a dedicated Infosec Kubernetes cluster on Equinix Metal to capture events specific to Equinix's unique environment, addressing gaps that off-the-shelf products did not cover.",
							"▼ Designed a data lake strategy to ingest and store data from various security streams, partitioned in S3 buckets for future processing and training.",
							"▼ Created a generic data ingestion deployment in Kubernetes to collect security feeds and logs using rsyslog and Fluentbit. Since Fluentbit's syslog module doesn't support TLS encryption, rsyslog was used to ingest the streams, and Fluentbit was responsible for uploading batched stream data to Minio S3 buckets, denormalized based on features like application, region, and IP address.",
							"▼ Due to the absence of a Helm chart for Kubeflow, the team used Argo Workflows DAGs to manage machine learning (ML) pipeline steps for processing security data."
						]
					},
					{
						"Internship Program Leadership & Phishing Detection": [
							"▼ Led two internship programs with college students, teaching fundamental skills in software development, machine learning, and product development.",
							"▼ Guided interns in creating a homegrown solution to detect phishing sites using the UCI phishing website dataset to train machine learning models.",
							"▼ Exposed the trained models via a REST API endpoint, allowing easy integration with other applications and services.",
							"▼ Developed a Microsoft Outlook add-in that enabled users to validate if an email contained a phishing site, providing a practical application of machine learning and security concepts.",
							"▼ Mentored interns in full-stack development, data science, and security practices, fostering hands-on learning and real-world problem-solving."
						]
					}
				],
				"✅ Security": [
					{
						"▼ 2020 Ransomware Attack": [
							"▼ Played a key role in remediating Equinix’s 2020 ransomware attack by collaborating with Red Teams to assess infrastructure and security posture across environments.",
							"▼ Automated the collection of global PAN firewall logs during the ransomware attack to support the Red Team's investigation.",
							"▼ Advised IT teams on security best practices, including key rotation and access control measures, to minimize security risks during the incident.",
							"▼ Procured encrypted data from affected hosts as requested by the Red Team."
						]
					},
					{
						"▼ Threat Modeling": [
							"▼ Assessed the firmware security risks for Equinix Metal servers and evaluated vendor solutions to protect firmware integrity."
						]
					}
				]
			},
			"skills": "Kubernetes · Helm · ArgoCD · Python · Go · MLOps · Threat Modeling"
		}
	},
	{
		"name": "Georgia Pacific",
		"title": "Machine Learning Engineer (Freelancer)",
		"start": "2021",
		"end": "2021",
		"iconPath": "work/gp.svg",
		"href": "https://www.gp.com/",
		"summary": "As a freelancer, designed a thread-safe, modular C++ application to connect to facility cameras over RTSP, detect motion in restricted areas, and alert on safety violations. Leveraged ML and computer vision to enhance security and automate safety monitoring. Deployed the solution to Kubernetes clusters at manufacturing plants for scalable, real-time monitoring.",
		"overview": {
			"summary": "As a freelancer, designed a thread-safe, modular C++ application to connect to facility cameras over RTSP, detect motion in restricted areas, and alert on safety violations. Leveraged ML and computer vision to enhance security and automate safety monitoring. Deployed the solution to Kubernetes clusters at manufacturing plants for scalable, real-time monitoring.",
			"contributions": {
				"✅ Software Development": [
					"▼ Designed a thread-safe, modular C++ application to interface with facility cameras over RTSP, continuously reading frames and pushing them to a mutex-protected queue.",
					"▼ Implemented worker threads to process frames, utilizing the decorator pattern. Each decorator was responsible for specific tasks, including masking the frame, detecting motion, reducing the frame size, and calling the gRPC object detection endpoint.",
					"▼ Stored detections in a MinIO S3 bucket."
				],
				"✅ Data Science": [
					"▼ Used a pretrained YOLOv5s ONNX model loaded into the OpenCV Deep Neural Network Python module, configured to run on Nvidia GPUs using CUDA.",
					"▼ Exposed a multi-threaded Python gRPC server with an object classification endpoint, returning detected objects."
				],
				"✅ SRE": [
					"▼ Containerized both the C++ application and the Python gRPC server.",
					"▼ Deployed the application using a Helm chart, modifying values based on each manufacturing facility.",
					"▼ Streamlined the C++ program by limiting it to interface with a single facility camera, as each facility camera was assigned its own deployment through a Helm range loop."
				]
			},
			"skills": "C++ · Python · Helm · Kubernetes · Yolo5 · OpenCV"
		}
	},
	{
		"name": "Global Payments Inc",
		"title": "Security Engineer",
		"start": "2019",
		"end": "2020",
		"iconPath": "work/global.svg",
		"href": "https://www.globalpayments.com/",
		"summary": "Automated the manual review of enterprise application logs for PCI compliance by developing an extensible ML pipeline in Kubeflow and a web application for scheduling log reviews and validating model predictions. This solution significantly reduced manual effort and improved efficiency by enabling automated anomaly detection for PCI compliance. Was a member of the security architecture review panel ensure alignment of projects with the company’s overall security objectives and standards.",
		"overview": {
			"summary": "Automated the manual review of enterprise application logs for PCI compliance by developing an extensible ML pipeline in Kubeflow and a web application for scheduling log reviews and validating model predictions. This solution significantly reduced manual effort and improved efficiency by enabling automated anomaly detection for PCI compliance. Was a member of the security architecture review panel ensuring alignment of projects with the company’s overall security objectives and standards.",
			"contributions": {
				"✅ Software Development": [
					"▼ Developed a web app that allows app owners to schedule log reviews and easily validate detected anomalies.",
					"▼ Built the web app using Angular, TypeScript, Bootstrap 4, and SCSS, with a responsive design based on the ngx-admin template. Unit tests were written using Jasmine and Karma.",
					"▼ Integrated Google's OAuth 2.0 with OIDC for Single Sign-On (SSO). The web app included an authentication module that dynamically displayed user options based on roles (e.g., admin, reviewer). The app server validated the user's OIDC token and provided a JWT token for future authentication and authorization (Authn/z).",
					"▼ Utilized OpenAPI Generator with an OpenAPI 3.0 specification file to automatically generate a Flask CORS Python server. This automated the creation of controllers based on routes. The code was structured according to the Open/Closed principle: open for extension but closed for modification.",
					"▼ Used MySQL for app data storage and MongoDB to store detected anomalies."
				],
				"✅ Data Science": [
					"▼ Built generic extract, clean, transform, train, and predict scripts using Scikit-Learn, Pandas, and NumPy, designed for use with several application logs.",
					"▼ Containerized steps to use in Kubeflow pipelines.",
					"▼ Developed two Kubeflow pipelines—one for training models and one for prediction.",
					"▼ Ran nightly prediction pipeline batch jobs on app logs, tracking anomalous logs for app owner review to adhere to PCI requirements.",
					"▼ Trained an unsupervised K-Means algorithm on log data, using the Silhouette Score to measure clustering results. Filtered out noise by reducing high-dimensional data into a lower-dimensional space using Principal Component Analysis (PCA)."
				],
				"✅ SRE": [
					"▼ Deployed Kubeflow, MySQL, MongoDB, and the web application to Google Kubernetes Engine (GKE).",
					"▼ Managed MySQL, MongoDB, and the web app via Helm."
				],
				"✅ Security": [
					"▼ Was a member of the security architecture review panel, providing subject matter expertise (SME) to ensure alignment of projects with the company’s overall security objectives and standards.",
					"▼ Conducted comprehensive reviews of proposed designs and solutions, identifying potential security risks and recommending mitigations, with a focus on ensuring compliance with NIST 800-53 and ISO 27001 frameworks.",
					"▼ Collaborated with cross-functional teams to assess the security posture of system designs, ensuring adherence to company security standards, including encryption requirements, access controls, and network security.",
					"▼ Reviewed data flow diagrams and system integrations to evaluate potential vulnerabilities, ensuring proper handling of sensitive data and compliance with privacy regulations (e.g., PCI, GDPR)."
				]
			},
			"skills": "Kubernetes · Kubeflow · Scikit-Learn · NumPy · Pandas · Web Development · Angular Material · OIDC · MongoDB · NIST 800-53 · ISO 27001"
		}
	},
	{
		"name": "Georgia Tech Research Institute",
		"title": "Security Researcher",
		"start": "2016",
		"end": "2019",
		"iconPath": "work/gtri.png",
		"href": "https://www.gtri.gatech.edu/",
		"summary": "Split time between software development and machine learning research, working on projects to enhance security and automate processes for government sponsors. Led a joint project with McAfee to classify the severity of SIEM alerts using machine learning, automating alert reporting and prioritizing alerts for SOC analysts. Focused on advancing software security and applying ML to improve security operations and threat detection.",
		"overview": {
			"summary": "Split time between software development and machine learning research, working on projects to enhance security and automate processes for government sponsors. Led a joint project with McAfee to classify the severity of SIEM alerts using machine learning, automating alert reporting and prioritizing alerts for SOC analysts. Focused on advancing software security and applying ML to improve security operations and threat detection.",
			"contributions": {
				"✅ Security & Software Development": [
					"▼ Improved a government-sponsored email and file management web app by implementing the Bell-LaPadula security model.",
					"▼ Applied industry-standard security practices to secure data at rest, in transit, and in use.",
					"▼ Refactored the existing monolithic application into modular components using Angular, Bootstrap, Tomcat, Jersey, and Jackson."
				],
				"✅ Adversarial Machine Learning Research": [
					"▼ Conducted research on adversarial machine learning attack prevention and detection techniques against various machine learning algorithms (SVM, Neural Networks, Decision Trees, Random Forests, KNN, etc.)."
				],
				"✅ Lead Machine Learning Engineer – SIEM Project": [
					"▼ Led a joint project with McAfee to classify the severity of SIEM alerts using machine learning, automating alert reporting and prioritizing alerts for SOC analysts."
				]
			},
			"skills": "Java · JavaScript · Angular Material · HTML · Bootstrap · JUnit · Unit Testing · Python · Scikit-Learn · NumPy · Pandas · Machine Learning"
		}
	}
]